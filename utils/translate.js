const request = require("request-promise");

class Translator {
  constructor(dataCollection = [], keysObj = []) {
    this.dataCollection = dataCollection;
    this.keysObj = keysObj;
  }

  async translateReuslt() {
    const dataTranslate = await this.translateMicrosoft();
    const result = this.recoveryDataCollection(dataTranslate);
    return result;
  }

  translateMicrosoft() {
    const sen = this.collectionToParagrap();
    // const lang = vi ? "from=vi&to=en" : "from=en&to=vi";
    const lang = "from=en&to=vi";
    const url = `http://api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=ABB1C5A823DC3B7B1D5F4BDB886ED308B50D1919&${lang}&text=${sen}`;
    const finalUrl = encodeURI(url);
    return new Promise((resolve, reject) => {
      request(finalUrl).then((data) => {
        if (data) {
          resolve(data.replace(/"/g, ""));
        } else {
          reject("ЁЯШГ No result");
        }
      });
    }).catch((err) => {
      console.log(err);
    });
  }

  translateViki(dataCollection = []) {
    const sen = this.collectionToParagrap(dataCollection);
    let lang = this.detectVi(sen) ? "src=vi&tgt=en" : "src=en&tgt=vi";
    const url = "https://vikitranslator.com/divaba";
    const options = {
      method: "POST",
      uri: url,
      headers: {
        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
      },
      body: `key=testkey&${lang}&vb=${sen}`,
    };
    return new Promise((resolve, rejects) => {
      request(options).then((data) => {
        if (data) {
          resolve(data);
        } else {
          rejects("No result");
        }
      });
    }).catch((err) => {
      console.log(err);
    });
  }

  collectionToParagrap() {
    let paragrap = "";
    this.dataCollection.map((item, index) => {
      this.keysObj.map((key, indexKey) => {
        paragrap +=
          item[key] + (indexKey === this.keysObj.length - 1 ? "" : " ; ");
      });
      paragrap += index === this.dataCollection.length - 1 ? "" : " * ";
    });

    return paragrap;
  }

  recoveryDataCollection(dataTranslate) {
    const data = dataTranslate.split("*").map((val) => {
      let _obj = {};
      const splitText = val.split(";");

      this.keysObj.map((key, index) => (_obj[key] = splitText[index]));
      return _obj;
    });
    return data;
  }

  detectVi(word) {
    const vi = [
      "a├ас║г├г├бс║б─Гс║▒с║│с║╡с║пс║╖├вс║зс║йс║лс║ес║н",
      "A├Ас║в├Г├Бс║а─Вс║░с║▓с║┤с║ос║╢├Вс║жс║ис║кс║дс║м",
      "d─С",
      "D─Р",
      "e├ис║╗с║╜├йс║╣├кс╗Бс╗Гс╗Ес║┐с╗З",
      "E├Ис║║с║╝├Йс║╕├Кс╗Ас╗Вс╗Дс║╛с╗Ж",
      "i├мс╗Й─й├нс╗Л",
      "I├Мс╗И─и├Нс╗К",
      "o├▓с╗П├╡├│с╗Н├┤с╗Ус╗Хс╗Чс╗Сс╗Щ╞бс╗Эс╗Яс╗бс╗Ыс╗г",
      "O├Тс╗О├Х├Ус╗М├Фс╗Тс╗Фс╗Цс╗Рс╗Ш╞ас╗Ьс╗Юс╗ас╗Ъс╗в",
      "u├╣с╗з┼й├║с╗е╞░с╗лс╗нс╗пс╗йс╗▒",
      "U├Щс╗ж┼и├Ъс╗д╞пс╗кс╗мс╗ос╗ис╗░",
      "yс╗│с╗╖с╗╣├╜с╗╡",
      "Yс╗▓с╗╢с╗╕├Эс╗┤",
    ];

    for (let i = 0; i < vi.length; i++) {
      const sub = vi[i].substr(1);
      const rex = new RegExp("[" + sub + "]", "g");
      if (rex.test(word)) return true;
    }
    return false;
  }
}

module.exports = Translator;
